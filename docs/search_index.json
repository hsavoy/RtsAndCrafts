[["index.html", "Rts and Crafts 1 Preface", " Rts and Crafts H. Savoy 2020-10-28 1 Preface This book catalogs different art projects that have been augmented (or overly-complicated?) by R. Many ideas come from conversations at the monthly Las Cruces/El Paso RLadies meetings. Hit me up if you want to join in. All code (including this book!) is available at hsavoy/rtsAndCrafts. "],["paintByNumbers.html", "2 Introduction 2.1 Intro 2.2 Packages being used", " 2 Introduction 2.1 Intro This project aims to convert an image (e.g., of my cat) into paint-by-number instructions. This involves: reducing the number of colors down to a reasonable number, i.e. reducing the 16+ million colors possible with 8-bit images down to like 10-15, converting raster data into polygons based on those limited colors, saving those resulting polygons with their color IDs as printable and readable instructions, This document follows the adventure of getting it all to work. 2.2 Packages being used The packages we load are all on CRAN. raster has handy functions for handling and viewing images, sf and smoothr help with handling the polygons, and tidyverse has general grammar for tidy data manipulation. Disclaimer: there are probably more packages out there that do similar things, but I'm coming from a geospatial day job and I'm using these packages since there are already familiar to me. library(raster) library(sf) library(tidyverse) library(smoothr) 2.2.1 Step 1: Reading in the image img &lt;- brick(&quot;../images/byxbee_loaf.jpg&quot;) plotRGB(img) 2.2.2 Step 2: Reducing the number of colors 2.2.2.0.1 Attempt 1: just rounding the individual RGB values cutoff &lt;- 75 # number to rount to rounded_img &lt;- img # make a copy of the orignal image object values(rounded_img) &lt;- values(img) %&gt;% # extract values from image (strip spatial component) as_tibble() %&gt;% #converting the matrix to tibble for tidy data manipulation mutate_all(~cutoff*floor(./cutoff)) %&gt;% # overwrite all values to rounded down values to cutoff as.matrix() # convert back to matrix plotRGB(rounded_img) 2.2.2.0.2 Attempt 2: using kmeans clustering 2.2.2.0.3 Attempt 3: specifying a palette first I haven't tried this yet, but the plan is to see if we can split the colors from the image into a pre-defined set of colors. Maybe cool ones like the Wes Anderson pallete or matching to paint sets to make painting the printed result more feasible. 2.2.3 Step 3: Reducing the number of colors "]]
